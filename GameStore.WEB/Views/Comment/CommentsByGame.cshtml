@model GameStore.WEB.Models.ViewModel.CommentsView
@{
    ViewBag.Title = "GetAllCommentsByGame";
}


<h2>Comments by game</h2>
<hr />

@using (Html.BeginForm("LeaveComment", "Comment", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      
        @Html.HiddenFor(x => x.NewComment.ParentCommentId)
        @Html.HiddenFor(x => x.NewComment.IsQuote , new{ Value = "false"})

        <div class="form-group">
            <p id="titleReply" style="visibility:hidden;  display:inline-block" class="lead" ></p>
            <a id="cancelReply" onclick="cancelReplyToComment()" style="visibility:hidden; cursor:pointer; text-decoration:none; color:red"> X</a>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewComment.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewComment.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewComment.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewComment.Body, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewComment.Body, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewComment.Body, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Send" class="btn btn-default" />
            </div>
        </div>
    </div>


}
<div>
    <div>
        @if (Model != null && Model.CommentList.Any())
        {
            var mainComment = Model.CommentList.Where(x => x.ParentCommentId == null);
            foreach (var comment in mainComment)
            {
                <div class="comment-container">
                    <div class="comment">
                        <p class="comment-author lead ">
                            <span class="">Name: </span>
                            <span class="text-success">@comment.Name</span>
                        </p>                    

                        @if (comment.IsDeleted)
                        {
                            <p class="comment-body text-danger">The comment has been deleted</p>
                        }
                        else
                        {
                            <p class="comment-body">@comment.Body</p>
                        }    

                        <span class="comment-author">
                            <a href="#" class="comment-link" onclick="addInfoForReply('@comment.Id', '@comment.Name', false)">Reply</a>
                            <a href="#" class="comment-link" onclick="addInfoForReply('@comment.Id', '@comment.Name', true)">Quote</a>
                        </span>
                        <div style="display: inline-block">
                            @using (Html.BeginForm("RemoveComment", "Comment", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("gameId", comment.GameId)
                                @Html.Hidden("commentId", comment.Id)
                                <input type="submit" onclick="deleteComment('form_@comment.Id')" value="Remove" class="comment-link" />
                                @Html.ActionLink("Ban","Ban","Ban",new{userId = comment.UserId}, new{@class = "comment-link" })                                                                                                   
                                    
                            }
                        </div>
                
                    </div>
                    @CommentsTreeHalper.GetTreeView(Model.CommentList, comment.Id)
                </div>
            }
        }
    </div>
</div>

@section scripts
{
    <script>
        function addInfoForReply(commentId, name, isQuote) {
            document.getElementById("NewComment_ParentCommentId").setAttribute("value", commentId);
            document.getElementById("NewComment_IsQuote").setAttribute("value", isQuote);
            document.getElementById("NewComment_Name").focus();
            document.getElementById("cancelReply").style.visibility = "visible";
            var titleReply = document.getElementById("titleReply");
            titleReply.style.visibility = "visible";
            if (isQuote) {
                titleReply.innerHTML = "Quote to <span class='text-success'>" + name + "</span>  comment";
            } else {
                titleReply.innerHTML = "Reply to <span class='text-success'>" + name + "</span>  comment";
            }
        }

        function cancelReplyToComment() {
            document.getElementById("cancelReply").style.visibility = "hidden";
            document.getElementById("titleReply").style.visibility = "hidden";
            document.getElementById("NewComment_ParentCommentId").setAttribute("value", "");
            document.getElementById("NewComment_IsQuote").setAttribute("value", "false");
        }


        function deleteComment(formId) {
            var result = confirm("Delete comment?");
            var form = document.getElementById("form_" + formId);
            if (result === true) {
                form.submit();
            } else {
                return false;
            }
        }

    </script>
}






